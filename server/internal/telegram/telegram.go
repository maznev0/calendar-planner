package telegram

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"

	"server/pkg/logging"

	tgBotApi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/nats-io/nats.go"
)

var orderCalcState = make(map[int64]string) // key: chatID, value: orderID

// OrderPayload ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞
type OrderPayload struct {
	Order struct {
		OrderID      string `json:"order_id"`
		OrderDate    string `json:"order_date"`
		OrderAddress string `json:"order_address"`
		PhoneNumber  string `json:"phone_number"`
		Meters       int    `json:"meters"`
		Price        int    `json:"price"`
		ChatID       int64  `json:"chat_id"`
		Note         string `json:"note"`
	} `json:"order"`
	Workers []struct {
		WorkerName string `json:"workername"`
		WorkerID   string `json:"worker_id"`
	} `json:"workers"`
}

// StartTelegramBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ NATS
func StartTelegramBot(bot *tgBotApi.BotAPI, logger *logging.Logger, nc *nats.Conn) error {
	webhookURL := os.Getenv("WEBHOOK_URL")
	if webhookURL == "" {
		logger.Fatal("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
		return fmt.Errorf("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
	_, err := bot.Request(tgBotApi.DeleteWebhookConfig{})
	if err != nil {
    	logger.Errorf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
    	return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
	webhookConfig, err := tgBotApi.NewWebhook(webhookURL)
	if err != nil {
		logger.Errorf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
		return err
	}

	_, err = bot.Request(webhookConfig)
	if err != nil {
		logger.Fatalf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
		return err
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		defer r.Body.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞

		bytes, err := io.ReadAll(r.Body)
		if err != nil {
			logger.Errorf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞", http.StatusBadRequest)
			return
		}

		var update tgBotApi.Update
		if err := json.Unmarshal(bytes, &update); err != nil {
			logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
			return
		}

		logger.Infof("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %+v", update)
		handleUpdate(bot, update, logger)
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram
	go func() {
		logger.Info("–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8081")
		if err := http.ListenAndServe(":8081", nil); err != nil {
			logger.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ NATS
	_, err = nc.Subscribe("new_order", func(msg *nats.Msg) {
		var order OrderPayload
		if err := json.Unmarshal(msg.Data, &order); err != nil {
			logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: %v", err)
			return
		}

		var workerNames []string
		for _, worker := range order.Workers {
			workerNames = append(workerNames, worker.WorkerName)
		}

		workersInfo := "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö"
		if len(workerNames) > 0 {
			workersInfo = strings.Join(workerNames, ", ")
		}

		messageText := fmt.Sprintf(
			"üöñ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüìÖ –î–∞—Ç–∞: %s\nüìç –ê–¥—Ä–µ—Å: %s\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\nüìè –ü–ª–æ—â–∞–¥—å: %d –ú¬≤\nüí∞ –¶–µ–Ω–∞: %d —Ä—É–±.\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: %s\nüë∑‚Äç‚ôÇÔ∏è –†–∞–±–æ—á–∏–µ: %s",
			order.Order.OrderDate, order.Order.OrderAddress, order.Order.PhoneNumber,
			order.Order.Meters, order.Order.Price, order.Order.Note, workersInfo,
		)

		chatID := order.Order.ChatID
		if chatID == 0 {
			logger.Error("–û—à–∏–±–∫–∞: —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç chat_id")
			return
		}

		buttons := tgBotApi.NewInlineKeyboardMarkup(
			tgBotApi.NewInlineKeyboardRow(
				tgBotApi.NewInlineKeyboardButtonData("üíµ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", fmt.Sprintf("fill_calc:%s", order.Order.OrderID)),
			),
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
		msgToSend := tgBotApi.NewMessage(chatID, messageText)
		msgToSend.ReplyMarkup = buttons

		if _, err := bot.Send(msgToSend); err != nil {
			logger.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %v", err)
		} else {
			logger.Infof("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç %d", chatID)
		}
	})

	if err != nil {
		logger.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ NATS: %v", err)
		return err
	}

	logger.Info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ NATS: new_order")

	// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–∂–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
	select {}
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func handleUpdate(bot *tgBotApi.BotAPI, update tgBotApi.Update, logger *logging.Logger) {
	if update.Message == nil || !update.Message.IsCommand() {
		return
	}

	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	command := update.Message.Command()
	logger.Infof("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç user_id: %d, chat_id: %d: %s", userID, chatID, command)

	response := "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."
	switch command {
	case "start":
		response = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã."
		logger.Infof("–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: chat_id %d, user_id %d", chatID, userID)
	}

	msg := tgBotApi.NewMessage(chatID, response)
	if _, err := bot.Send(msg); err != nil {
		logger.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func handleCallback(bot *tgBotApi.BotAPI, update tgBotApi.Update, logger *logging.Logger) {
	if update.CallbackQuery == nil {
		return
	}

	callbackData := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	parts := strings.Split(callbackData, ":")
	action, orderID := parts[0], parts[1]

	if action == "fill_calc" {
		// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
		msg := tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n*–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å_–∑–∞–±—Ä–∞–ª —Ä–∞—Å—Ö–æ–¥—ã –ª–∏—Ç—Ä—ã_–ª–∞–∫–∞ –æ–ø–ª–∞—Ç–∞_—Ä–∞–±–æ—á–∏–º1,–æ–ø–ª–∞—Ç–∞_—Ä–∞–±–æ—á–∏–º2,...*")
		msg.ParseMode = "Markdown"
		bot.Send(msg)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º orderID, –∂–¥–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
		orderCalcState[chatID] = orderID

		// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º
		editMsg := tgBotApi.NewEditMessageReplyMarkup(chatID, messageID, tgBotApi.NewInlineKeyboardMarkup())
		bot.Send(editMsg)
	}
}

func handleMessage(bot *tgBotApi.BotAPI, update tgBotApi.Update, logger *logging.Logger) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç
	if orderID, ok := orderCalcState[chatID]; ok {
		delete(orderCalcState, chatID) // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞

		parts := strings.Split(text, " ")
		if len(parts) < 5 {
			bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."))
			return
		}

		// –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
		totalPrice, _ := strconv.Atoi(parts[0])
		driverPrice, _ := strconv.Atoi(parts[1])
		otherPrice, _ := strconv.Atoi(parts[2])
		lacquerLiters, _ := strconv.Atoi(parts[3])
		workerPayments := strings.Split(parts[4], ",")

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–±–æ—á–∏—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞
		workerIDs := getWorkerIDsForOrder(orderID)
		if len(workerIDs) != len(workerPayments) {
			bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–ª–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —á–∏—Å–ª–æ–º —Ä–∞–±–æ—á–∏—Ö."))
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–∑–∞–ø—Ä–æ—Å
		paymentData := map[string]interface{}{
			"order_id":     orderID,
			"total_price":  totalPrice,
			"driver_price": driverPrice,
			"other_price":  otherPrice,
			"lacquer_litres": lacquerLiters,
			"worker_payments": map[string]int{},
		}

		for i, workerID := range workerIDs {
			workerPayment, _ := strconv.Atoi(workerPayments[i])
			paymentData["worker_payments"].(map[string]int)[workerID] = workerPayment
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		err := sendPaymentData(paymentData)
		if err != nil {
			bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä."))
			logger.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—á–µ—Ç–∞: %v", err)
			return
		}

		bot.Send(tgBotApi.NewMessage(chatID, "‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"))
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ä–∞–±–æ—á–∏—Ö –ø–æ –∑–∞–∫–∞–∑—É
func getWorkerIDsForOrder(orderID string) []string {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π worker_id –¥–ª—è –∑–∞–∫–∞–∑–∞
	// –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
	return []string{}
}

func sendPaymentData(paymentData map[string]interface{}) error {
	jsonData, err := json.Marshal(paymentData)
	if err != nil {
		return err
	}

	req, err := http.NewRequest("POST", "http://localhost:10000/payments/update", strings.NewReader(string(jsonData)))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %s", string(body))
	}

		return nil
	}
// package telegram

// import (
// 	"encoding/json"
// 	"fmt"
// 	"io"
// 	"net/http"
// 	"os"
// 	"strconv"
// 	"strings"
// 	"sync"

// 	"server/pkg/logging"

// 	tgBotApi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// 	"github.com/nats-io/nats.go"
// )

// // OrderPayload ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–∫–∞–∑–∞
// type OrderPayload struct {
// 	Order struct {
// 		OrderID      string `json:"order_id"`
// 		OrderDate    string `json:"order_date"`
// 		OrderAddress string `json:"order_address"`
// 		PhoneNumber  string `json:"phone_number"`
// 		Meters       int    `json:"meters"`
// 		Price        int    `json:"price"`
// 		DriverID     string `json:"driver_id"`
// 		ChatID       int64  `json:"chat_id"`
// 		Note         string `json:"note"`
// 	} `json:"order"`
// 	Workers []struct {
// 		WorkerName string `json:"workername"`
// 		WorkerID   string `json:"worker_id"`
// 	} `json:"workers"`
// }

// // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞
// type CalculationState struct {
// 	OrderID       string
// 	CurrentWorker int
// 	WorkerPayments map[string]int
// }

// var (
// 	userCalculations = make(map[int64]*CalculationState) // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ chatID
// 	mu               sync.Mutex                          // –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö
// )

// // StartTelegramBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ NATS
// func StartTelegramBot(bot *tgBotApi.BotAPI, logger *logging.Logger, nc *nats.Conn) error {
// 	webhookURL := os.Getenv("WEBHOOK_URL")
// 	if webhookURL == "" {
// 		logger.Fatal("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
// 		return fmt.Errorf("webhook URL –Ω–µ –∑–∞–¥–∞–Ω")
// 	}

// 	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
// 	if _, err := bot.Request(tgBotApi.DeleteWebhookConfig{}); err != nil {
// 		logger.Errorf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
// 		return err
// 	}

// 	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
// 	webhookConfig, err := tgBotApi.NewWebhook(webhookURL)
// 	if err != nil {
// 		logger.Errorf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: %v", err)
// 		return err
// 	}

// 	if _, err = bot.Request(webhookConfig); err != nil {
// 		logger.Fatalf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: %v", err)
// 		return err
// 	}

// 	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
// 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
// 		defer r.Body.Close()

// 		bytes, err := io.ReadAll(r.Body)
// 		if err != nil {
// 			logger.Errorf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
// 			http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞", http.StatusBadRequest)
// 			return
// 		}

// 		if len(bytes) == 0 {
// 			logger.Warn("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
// 			http.Error(w, "–ü—É—Å—Ç–æ–π JSON", http.StatusBadRequest)
// 			return
// 		}

// 		var update tgBotApi.Update
// 		if err := json.Unmarshal(bytes, &update); err != nil {
// 			logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
// 			http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
// 			return
// 		}

// 		logger.Infof("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %+v", update)
// 		handleUpdate(bot, update)
// 	})

// 	// –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
// 	go func() {
// 		logger.Info("–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8081")
// 		if err := http.ListenAndServe(":8081", nil); err != nil {
// 			logger.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
// 		}
// 	}()

// 	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ NATS
// 	_, err = nc.Subscribe("new_order", func(msg *nats.Msg) {
// 		var order OrderPayload
// 		if err := json.Unmarshal(msg.Data, &order); err != nil {
// 			logger.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: %v", err)
// 			return
// 		}

// 		sendOrderNotification(bot, order)
// 	})

// 	if err != nil {
// 		logger.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ NATS: %v", err)
// 		return err
// 	}

// 	logger.Info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ NATS: new_order")

// 	select {} // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
// }

// // handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
// func handleUpdate(bot *tgBotApi.BotAPI, update tgBotApi.Update) {
// 	if update.CallbackQuery != nil {
// 		handleCallbackQuery(bot, update.CallbackQuery)
// 		return
// 	}

// 	if update.Message != nil {
// 		handleUserInput(bot, update.Message)
// 	}
// }

// // sendOrderNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
// func sendOrderNotification(bot *tgBotApi.BotAPI, order OrderPayload) {
// 	chatID := order.Order.ChatID
// 	if chatID == 0 {
// 		return
// 	}

// 	workerNames := make([]string, len(order.Workers))
// 	for i, worker := range order.Workers {
// 		workerNames[i] = worker.WorkerName
// 	}

// 	workersInfo := "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö"
// 	if len(workerNames) > 0 {
// 		workersInfo = strings.Join(workerNames, ", ")
// 	}

// 	messageText := fmt.Sprintf(
// 		"üöñ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüìÖ –î–∞—Ç–∞: %s\nüìç –ê–¥—Ä–µ—Å: %s\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\nüìè –ü–ª–æ—â–∞–¥—å: %d –ú¬≤\nüí∞ –¶–µ–Ω–∞: %d —Ä—É–±.\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: %s\nüë∑‚Äç‚ôÇÔ∏è –†–∞–±–æ—á–∏–µ: %s",
// 		order.Order.OrderDate, order.Order.OrderAddress, order.Order.PhoneNumber,
// 		order.Order.Meters, order.Order.Price, order.Order.Note, workersInfo,
// 	)

// 	buttons := tgBotApi.NewInlineKeyboardMarkup(
// 		tgBotApi.NewInlineKeyboardRow(
// 			tgBotApi.NewInlineKeyboardButtonData("üíµ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", fmt.Sprintf("fill_calc:%s", order.Order.OrderID)),
// 		),
// 	)

// 	msg := tgBotApi.NewMessage(chatID, messageText)
// 	msg.ReplyMarkup = buttons
// 	bot.Send(msg)
// }

// // handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
// func handleCallbackQuery(bot *tgBotApi.BotAPI, query *tgBotApi.CallbackQuery) {
// 	data := strings.Split(query.Data, ":")
// 	if len(data) < 2 {
// 		return
// 	}

// 	action, orderID := data[0], data[1]
// 	chatID := query.Message.Chat.ID

// 	if action == "fill_calc" {
// 		mu.Lock()
// 		userCalculations[chatID] = &CalculationState{
// 			OrderID:       orderID,
// 			CurrentWorker: 0,
// 			WorkerPayments: make(map[string]int),
// 		}
// 		mu.Unlock()

// 		bot.Send(tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ:"))
// 	}
// }

// // handleUserInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç)
// func handleUserInput(bot *tgBotApi.BotAPI, msg *tgBotApi.Message) {
// 	chatID := msg.Chat.ID
// 	mu.Lock()
// 	state, exists := userCalculations[chatID]
// 	mu.Unlock()

// 	if !exists || state == nil {
// 		return
// 	}

// 	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
// 	if state.CurrentWorker >= len(state.WorkerPayments) {
// 		bot.Send(tgBotApi.NewMessage(chatID, "‚úÖ –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã!"))
// 		mu.Lock()
// 		delete(userCalculations, chatID)
// 		mu.Unlock()
// 		return
// 	}

// 	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ "–ì–æ—Ç–æ–≤–æ"
// 	if strings.ToLower(msg.Text) == "–≥–æ—Ç–æ–≤–æ" {
// 		bot.Send(tgBotApi.NewMessage(chatID, "‚úÖ –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã!"))
// 		mu.Lock()
// 		delete(userCalculations, chatID)
// 		mu.Unlock()
// 		return
// 	}

// 	// –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã
// 	payment, err := strconv.Atoi(msg.Text)
// 	if err != nil {
// 		bot.Send(tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã):"))
// 		return
// 	}

// 	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–ª–∞—Ç—É
// 	workerID := state.OrderID // –ü—Ä–∏–º–µ—Ä (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID —Ä–∞–±–æ—á–µ–≥–æ)
// 	state.WorkerPayments[workerID] = payment

// 	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É
// 	state.CurrentWorker++

// 	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–∞–±–æ—á–∏–µ
// 	if state.CurrentWorker >= len(state.WorkerPayments) {
// 		bot.Send(tgBotApi.NewMessage(chatID, "‚úÖ –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã!"))
// 		mu.Lock()
// 		delete(userCalculations, chatID)
// 		mu.Unlock()
// 		return
// 	}

// 	// –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
// 	bot.Send(tgBotApi.NewMessage(chatID, "–í—ã–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."))
// }
