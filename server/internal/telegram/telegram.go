package telegram

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/signal"
	"server/pkg/logging"
	"server/pkg/redis"
	"syscall"
	"time"

	tgBotApi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
type Order struct {
	DriverID  int64  `json:"driver_id"`
	OrderText string `json:"order_text"`
}

func StartTelegramBot(bot *tgBotApi.BotAPI, logger *logging.Logger) {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
	webhookURL := os.Getenv("WEBHOOK_URL")
	webhookConfig, _ := tgBotApi.NewWebhook(webhookURL)
	if _, err := bot.Request(webhookConfig); err != nil {
    	logger.Fatal("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: ", err)
	}


	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
	redisClient := redis.NewClient(ctx)
	pubsub := redisClient.Subscribe(ctx, "new_order")
	orderChannel := pubsub.Channel()

	// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
	server := &http.Server{
		Addr:    ":8081",
		Handler: webhookHandler(bot, logger),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		logger.Info("–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Telegram –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8081")
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatal("–û—à–∏–±–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞:", err)
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Redis
	go func() {
		for {
			select {
			case <-ctx.Done():
				logger.Info("–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Redis")
				return
			case msg := <-orderChannel:
				var order Order
				if err := json.Unmarshal([]byte(msg.Payload), &order); err != nil {
					logger.Error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞:", err)
					continue
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—é
				message := tgBotApi.NewMessage(order.DriverID, fmt.Sprintf("üöñ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: %s", order.OrderText))
				bot.Send(message)
			}
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É (Ctrl+C, SIGTERM)
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	<-stop // –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	logger.Info("–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")

	// –ó–∞–≤–µ—Ä—à–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer shutdownCancel()
	if err := server.Shutdown(shutdownCtx); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É Redis
	if err := pubsub.Close(); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis-–ø–æ–¥–ø–∏—Å–∫–∏:", err)
	}

	logger.Info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}

// –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
func webhookHandler(bot *tgBotApi.BotAPI, logger *logging.Logger) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		body, err := io.ReadAll(r.Body)
		if err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", http.StatusInternalServerError)
			return
		}
		defer r.Body.Close()

		update := tgBotApi.Update{}
		if err := json.Unmarshal(body, &update); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON", http.StatusBadRequest)
			return
		}

		handleUpdate(bot, update, logger)
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
func handleUpdate(bot *tgBotApi.BotAPI, update tgBotApi.Update, logger *logging.Logger) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	logger.Infof("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", update.Message.From.UserName, text)

	switch text {
	case "/start":
		bot.Send(tgBotApi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã."))
	default:
		bot.Send(tgBotApi.NewMessage(chatID, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."))
	}
}
