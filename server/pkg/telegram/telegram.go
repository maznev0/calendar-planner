package telegram

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"server/pkg/logging"

	tgBotApi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserState struct {
	Step      string
	Username  string
	UserRole  string
	TgUsername string
}

func StartTelegramBot(bot *tgBotApi.BotAPI, logger *logging.Logger) {
	u := tgBotApi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	userStates := make(map[int64]UserState)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		logger.Infof("Message from %s: %s", update.Message.From.UserName, text)

		switch text {
		case "/start":
			sendMainMenu(bot, chatID)

		case "/users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë®‚Äçüíª":
			sendUsersList(bot, chatID, logger)

		case "/adduser", "–°–æ–∑–¥–∞—Ç—å üë®‚Äçüíª":
			msg := tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
			bot.Send(msg)
			userStates[chatID] = UserState{Step: "waiting_for_username"}

		default:
			handleUserInput(bot, chatID, text, userStates, logger)
		}
	}
}

func sendMainMenu(bot *tgBotApi.BotAPI, chatID int64) {
	msg := tgBotApi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	keyboard := tgBotApi.NewReplyKeyboard(
		tgBotApi.NewKeyboardButtonRow(
			tgBotApi.NewKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë®‚Äçüíª"),
			tgBotApi.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å üë®‚Äçüíª"),
			tgBotApi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å üë®‚Äçüíª"),

		),
		tgBotApi.NewKeyboardButtonRow(
			tgBotApi.NewKeyboardButton("C–æ–∑–¥–∞—Ç—å üöõ"),
			tgBotApi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å üöõ"),
			tgBotApi.NewKeyboardButton("–ü–µ—Ä–µ—Å–∞–¥–∏—Ç—å üë®‚Äçüíªüöõ"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendUsersList(bot *tgBotApi.BotAPI, chatID int64, logger *logging.Logger) {
	resp, err := http.Get("http://localhost:10000/users/all")
	if err != nil {
		logger.Errorf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: %v", err)
		bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."))
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bot.Send(tgBotApi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."))
		return
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Errorf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
		bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	msg := tgBotApi.NewMessage(chatID, fmt.Sprintf("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n%s", string(body)))
	bot.Send(msg)
}

func createUser(username, role, telegramID string, logger *logging.Logger) error {
	url := "http://localhost:10000/users"

	userData := map[string]string{
		"username":    username,
		"user_role":   role,
		"telegram_id": telegramID, // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
	}

	jsonData, err := json.Marshal(userData)
	if err != nil {
		return err
	}

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		logger.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: %v", err)
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		logger.Errorf("–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
		return fmt.Errorf("API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	return nil
}

func handleUserInput(bot *tgBotApi.BotAPI, chatID int64, text string, userStates map[int64]UserState, logger *logging.Logger) {
	state, exists := userStates[chatID]
	if !exists {
		bot.Send(tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."))
		return
	}

	switch state.Step {
		case "waiting_for_username":
			state.Username = text
			state.Step = "waiting_for_role"
			userStates[chatID] = state // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			bot.Send(tgBotApi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin, driver, worker):"))

		case "waiting_for_role":
			state.UserRole = text
			state.Step = "waiting_for_tg_username"
			userStates[chatID] = state // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			bot.Send(tgBotApi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"))

		
		case "waiting_for_tg_username":
			state.TgUsername = text
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
			err := createUser(state.Username, state.UserRole, fmt.Sprintf("%d", chatID), logger)
			if err != nil {
			bot.Send(tgBotApi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
			} else {
				bot.Send(tgBotApi.NewMessage(chatID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"))
			}

			// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			delete(userStates, chatID)


		default:
			bot.Send(tgBotApi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é."))
	}
}
